/**
 *Write a program that executes the command ls -l /tmp in 5 different child processes.
 * Each child should be created by the same process (the father).
 * Wait for a child to exit before creating a new child
 */

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    const char* command = "ls";
    const char* args[] = {"ls", "-l", "/tmp", NULL};
    int num_children = 5;
    int status;

    for (int i = 0; i < num_children; i++) {
        pid_t pid = fork();

        if (pid == -1) {
            perror("fork failed");
            return 1;
        } else if (pid == 0) {
            // This is the child process
            execve(command, (char* const*)args, NULL);
            perror("execve failed"); // If execve returns, there was an error
            return 1;
        } else {
            // This is the parent process
            wait(&status); // Wait for the child to exit
        }
    }

    return 0;
}

/**C program that uses fork, wait, and execve to execute the ls -l /tmp command
 * in five different child processes, one after the other.
 *The program sets up the command as "ls" and args as an array containing "ls", "-l", and "/tmp", as required by execve.

 *The loop will create five child processes using fork(). The fork() system call duplicates the current process, creating a new child process that is an exact copy of the parent process.

*In the child process, we use execve() to replace the child process with the "ls -l /tmp" command using the specified arguments. If execve() returns, it means there was an error executing the command.

*In the parent process, we use wait() to wait for the child process to exit before creating a new child process.

*The loop will repeat five times, creating five child processes one after the other
 */

